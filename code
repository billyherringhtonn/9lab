Нижче наведений приклад коду на мові Python для класу "Двигун", який містить методи для встановлення та отримання параметрів двигуна:
class Engine:
    def __init__(self, volume, power):
        self._volume = volume
        self._power = power
    
    def get_volume(self):
        return self._volume
    
    def set_volume(self, volume):
        self._volume = volume
    
    def get_power(self):
        return self._power
    
    def set_power(self, power):
        self._power = power
Далі можна реалізувати клас "Автомобіль", який міститиме список компонентів та методи для додавання та видалення компонентів:
class Car:
    def __init__(self):
        self._components = []
    
    def add_component(self, component):
        self._components.append(component)
    
    def remove_component(self, component):
        self._components.remove(component)
Нарешті, можна реалізувати Компонувальник, який міститиме список доступних компонентів та функції для їх додавання до автомобіля та збереження до файлу:
class CarBuilder:
    def __init__(self):
        self._car = Car()
        self._available_components = []
    
    def add_component(self, component):
        self._car.add_component(component)
    
    def remove_component(self, component):
        self._car.remove_component(component)
    
    def save_car(self, filename):
        with open(filename, 'w') as file:
            for component in self._car._components:
                file.write(str(component) + '\n')
    
    def load_car(self, filename):
        with open(filename, 'r') as file:
            for line in file:
                component = eval(line.strip())
                self.add_component(component)
    
    def add_available_component(self, component):
        self._available_components.append(component)
    
    def remove_available_component(self, component):
        self._available_components.remove(component)
Це лише приклад можливого коду для Компонувальника. Необхідно детальніше продумати архітектуру програми та функціональність для досягнення бажаного результату.
продовжимо код для програми Компонувальника автомобіля. Ось код для головного вікна програми з візуальним інтерфейсом:
import tkinter as tk

class CarConfigurator(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        self.master.title("Компонувальник автомобіля")
        self.pack()
        self.create_widgets()

    def create_widgets(self):
        # Додавання елементів віджетів для вибору компонентів
        self.engine_var = tk.BooleanVar()
        self.engine_checkbutton = tk.Checkbutton(self, text="Двигун", variable=self.engine_var, command=self.update_car)
        self.engine_checkbutton.pack()

        self.transmission_var = tk.BooleanVar()
        self.transmission_checkbutton = tk.Checkbutton(self, text="Трансмісія", variable=self.transmission_var, command=self.update_car)
        self.transmission_checkbutton.pack()

        self.suspension_var = tk.BooleanVar()
        self.suspension_checkbutton = tk.Checkbutton(self, text="Підвіска", variable=self.suspension_var, command=self.update_car)
        self.suspension_checkbutton.pack()

        self.brakes_var = tk.BooleanVar()
        self.brakes_checkbutton = tk.Checkbutton(self, text="Гальма", variable=self.brakes_var, command=self.update_car)
        self.brakes_checkbutton.pack()

        # Додавання віджету відображення автомобіля
        self.car_canvas = tk.Canvas(self, width=300, height=200, bg="white")
        self.car_canvas.pack()

        # Початкова ініціалізація автомобіля
        self.car = Car()

    def update_car(self):
        # Оновлення автомобіля відповідно до вибраних компонентів
        self.car.clear_components()

        if self.engine_var.get():
            self.car.add_component(Engine())

        if self.transmission_var.get():
            self.car.add_component(Transmission())

        if self.suspension_var.get():
            self.car.add_component(Suspension())

        if self.brakes_var.get():
            self.car.add_component(BrakeSystem())

        self.draw_car()

    def draw_car(self):
        # Відображення автомобіля на віджеті canvas
        self.car_canvas.delete("all")

        components = self.car.get_components()

        x1, y1 = 50, 100
        x2, y2 = 250, 150

        self.car_canvas.create_rectangle(x1, y1, x2, y2, outline="black")

        if components:
            for component in components:
                if isinstance(component, Engine):
                    self.car_canvas.create_text(x1 + 20, y1 + 20, text="Двигун")

                if isinstance(component, Transmission):
                    self.car_canvas.create_text(x1 + 80, y1 + 20, text="Трансмісія")

                if isinstance(component, Suspension):
                    self.car_canvas.create_text(x1 + 140, y1 + 20, text="Підвіска")

                if isinstance(component, Brake):
                    self.car_canvas.create_text(x1 + 20, y1 + 20, text="Гальма")
                    
Тепер, коли ми маємо базові класи для компонентів та легкового автомобіля, ми можемо створити клас, який буде компонувальником, 
а також клас для створення легкових автомобілів з цих компонентів.

Створимо клас CarBuilder, який буде мати методи для додавання різних компонентів до автомобіля та для створення нового автомобіля з доданими компонентами:
class CarBuilder:
    def __init__(self):
        self.car = Car()

    def add_engine(self, engine):
        self.car.engine = engine

    def add_transmission(self, transmission):
        self.car.transmission = transmission

    def add_body(self, body):
        self.car.body = body

    def add_interior(self, interior):
        self.car.interior = interior

    def add_exterior(self, exterior):
        self.car.exterior = exterior

    def get_car(self):
        return self.car
Також нам потрібен клас CarAssembler, який буде створювати нові легкові автомобілі з доданими компонентами, використовуючи CarBuilder:
class CarAssembler:
    def __init__(self):
        self.builder = CarBuilder()

    def assemble_car(self, engine, transmission, body, interior, exterior):
        self.builder.add_engine(engine)
        self.builder.add_transmission(transmission)
        self.builder.add_body(body)
        self.builder.add_interior(interior)
        self.builder.add_exterior(exterior)
        return self.builder.get_car()
Цей клас буде використовуватись для створення нових автомобілів з доданими компонентами:

assembler = CarAssembler()

engine = Engine("V6", 3.5, "gasoline")
transmission = Transmission("automatic", 8)
body = Body("sedan", "white")
interior = Interior("leather", "black")
exterior = Exterior("alloy", "18-inch")

car = assembler.assemble_car(engine, transmission, body, interior, exterior)
Ми створили новий автомобіль з двигуном V6 об'ємом 3.5 літра на бензині, 
автоматичною 8-швидкісною коробкою передач, білого кольору седана з чорною шкіряною оббивкою та 18-дюймовими сплавними дисками.

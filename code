На основі наведеної діаграми класів я можу запропонувати наступний код програми на мові Python з візуальним інтерфейсом, 
що відповідає функціональності Компонувальника для формування складових легкового авто:
python
import tkinter as tk
from tkinter import ttk

class CarComponent:
    def __init__(self, name, manufacturer, model, year):
        self.name = name
        self.manufacturer = manufacturer
        self.model = model
        self.year = year

class Car:
    def __init__(self):
        self.components = []

    def add_component(self, component):
        self.components.append(component)

    def remove_component(self, component):
        self.components.remove(component)

class Inventory:
    def __init__(self):
        self.components = []

    def add_component(self, component):
        self.components.append(component)

    def remove_component(self, component):
        self.components.remove(component)

class ComponentEntryForm(tk.Frame):
    def __init__(self, master, inventory):
        super().__init__(master)
        self.inventory = inventory

        # Create labels and entry widgets for the component data
        name_label = tk.Label(self, text="Name:")
        self.name_entry = tk.Entry(self)
        manufacturer_label = tk.Label(self, text="Manufacturer:")
        self.manufacturer_entry = tk.Entry(self)
        model_label = tk.Label(self, text="Model:")
        self.model_entry = tk.Entry(self)
        year_label = tk.Label(self, text="Year:")
        self.year_entry = tk.Entry(self)

        # Create a button to add the component to the inventory
        add_button = tk.Button(self, text="Add Component", command=self.add_component)

        # Pack the widgets using grid layout
        name_label.grid(row=0, column=0)
        self.name_entry.grid(row=0, column=1)
        manufacturer_label.grid(row=1, column=0)
        self.manufacturer_entry.grid(row=1, column=1)
        model_label.grid(row=2, column=0)
        self.model_entry.grid(row=2, column=1)
        year_label.grid(row=3, column=0)
        self.year_entry.grid(row=3, column=1)
        add_button.grid(row=4, column=1)

    def add_component(self):
        # Create a CarComponent object from the entry data
        component = CarComponent(self.name_entry.get(),
                                 self.manufacturer_entry.get(),
                                 self.model_entry.get(),
                                 self.year_entry.get())

        # Add the component to the inventory
        self.inventory.add_component(component)

        # Clear the entry fields
        self.name_entry.delete(0, tk.END)
        self.manufacturer_entry.delete(0, tk.END)
        self.model_entry.delete(0, tk.END)
        self.year_entry.delete(0, tk.END)

class CarAssemblyForm(tk.Frame):
    def __init__(self, master, inventory):
        super().__init__(master)
        self.inventory = inventory

        # Create a listbox to display the available components
        self.component_listbox = tk.Listbox(self, height=5)
        self.component_listbox.pack(side=tk.LEFT, padx=5, pady=5)

        # Create buttons to add and remove components from the car
        add_button = tk.Button(self, text="Add Component", command=self.add_component)
        remove_button = tk.Button(self, text="Remove Component", command=self.remove_component)
def add_component(self):
    # Get the selected component from the listbox
    selection = self.component_listbox.curselection()
    if selection:
        component = self.component_listbox.get(selection[0])

        # Add the component to the car
        car.add_component(component)

def remove_component(self):
    # Get the selected component from the car
    selection = self.car_listbox.curselection()
    if selection:
        component = self.car_listbox.get(selection[0])

        # Remove the component from the car
        car.remove_component(component)
class App: def init(self, master): 
self.master = master self.inventory = Inventory() self.car = Car()
    # Create the component entry form and car assembly form
    component_entry_form = ComponentEntryForm(self.master, self.inventory)
    car_assembly_form = CarAssemblyForm(self.master, self.inventory, self.car)

    # Pack the forms using grid layout
    component_entry_form.grid(row=0, column=0, padx=10, pady=10)
    car_assembly_form.grid(row=0, column=1, padx=10, pady=10)

    # Populate the component listbox with the inventory components
    for component in self.inventory.components:
        self.component_listbox.insert(tk.END, component)

    # Populate the car listbox with the car components
    for component in self.car.components:
        self.car_listbox.insert(tk.END, component)
if name == 'main': 
root = tk.Tk() 
app = App(root) root.mainloop()

Ця програма створює візуальний інтерфейс з двома формами: форма введення компонентів автомобіля та форма складання автомобіля зі списку наявних компонентів.
Форма введення компонентів автомобіля містить поля для введення даних про компонент, такі як назва, виробник, модель та рік випуску. 
Після введення даних користувач може додати компонент до інвентарю за допомогою кнопки "Add Component".

Форма складання автомобіля містить список наявних компонентів з інвентарю та список компонентів автомобіля.
Користувач може додати компонент зі списку наявних компонентів до списку компонентів автомобіля
за допомогою кнопки "Add Component" або видалити компонент зі списку компонентів автомобіля за допомогою кнопки "Remove Component". 

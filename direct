                  +-----------------+
                  |       Car       |
                  +-----------------+
                  |   Engine engine |<>-------+ |
                  |Transmission trans|<>-------+| 
                  |Suspension suspen|<>-------+ |
                  | BrakeSystem brake|<>-------+|
                  +-----------------+           |
                             ^                  |
                             |     Component    |
                             +------------------+

На діаграмі зображені основні класи, що використовуються в програмі для Компонувальника автомобіля: 
Car, Engine, Transmission, Suspension, BrakeSystem. Клас Car містить компоненти, такі як двигун (Engine), трансмісію (Transmission), 
систему підвіски (Suspension) та гальма (BrakeSystem), кожен з яких пов'язаний з класом Car в залежності від того, 
які компоненти були вибрані для конкретного автомобіля.Для розробки Компонувальника для формування складових легкового авто необхідно виконати декілька етапів,
включаючи проектування діаграми класів та реалізацію програми з візуальним інтерфейсом.

Проектування діаграми класів:
Для початку, необхідно побудувати діаграму класів, яка буде відображати основні класи та взаємозв'язки між ними.
Основні класи, які можна розглянути для Компонувальника для формування складових легкового авто, включають:
Клас "Автомобіль", який буде містити всі складові автомобіля, такі як двигун, трансмісія, система керування та інші.
Клас "Двигун", який буде містити параметри двигуна, такі як об'єм, кількість циліндрів, потужність та інші.
Клас "Трансмісія", який буде містити параметри трансмісії, такі як тип передач, кількість швидкостей та інші.
Клас "Система керування", який буде містити параметри системи керування, такі як тип керма, розташування руля та інші.
Клас "Компонент", який буде базовим класом для всіх компонентів автомобіля та міститиме загальні методи та атрибути.
Реалізація програми з візуальним інтерфейсом:
Після проектування діаграми класів необхідно реалізувати програму з візуальним інтерфейсом,
яка дозволить користувачам вибирати компоненти та збирати з них повноцінний автомобіль.
Для цього можна використовувати мову програмування з підтримкою графічного інтерфейсу, таку як Python з бібліотекою Tkinter або PyQt.

Реалізація методів та атрибутів класів:
Після реалізації програми з візуальним інтерфейсом необхідно реалізувати методи та атрибути для кожного з класів, які були визначені на діаграмі класів.
Наприклад, для класу "Двигун" можуть бути реалізовані методи для встановлення та отримання значень параметрів двигуна, такі як "set_volume" та "get_power". 
Атрибути для кожного класу можуть бути встановлені за допомогою конструктора класу або методів з встановленням значень.

Реалізація взаємодії між класами:
Після того, як були реалізовані методи та атрибути для кожного з класів, необхідно реалізувати взаємодію між класами.
Наприклад, клас "Автомобіль" може містити метод "add_component", який дозволить додавати компоненти, такі як двигун або трансмісію, до автомобіля. 
Цей метод може викликати методи з встановленням атрибутів для класу "Автомобіль" та класу компонента, який додається.

Реалізація функціональності Компонувальника:
Остаточним кроком є реалізація функціональності Компонувальника, який дозволить користувачам вибирати компоненти та збирати з них повноцінний автомобіль. 
Для цього можна створити графічний інтерфейс, який буде містити список доступних компонентів та можливість їх вибору та додавання до автомобіля. 
Також можна реалізувати функції для збереження та завантаження складових автомобіля до файлу.

Отже, для успішної розробки Компонувальника для формування складових легкового авто необхідно проектувати діаграму класів, реалізовувати 
методи та атрибути для кожного з класів, реалізовувати взаємодію між класами та реалізувати функціональність Компонувальника.

Нижче наведений приклад коду на мові Python для класу "Двигун", який містить методи для встановлення та отримання параметрів двигуна:
class Engine:
    def __init__(self, volume, power):
        self._volume = volume
        self._power = power
    
    def get_volume(self):
        return self._volume
    
    def set_volume(self, volume):
        self._volume = volume
    
    def get_power(self):
        return self._power
    
    def set_power(self, power):
        self._power = power
Далі можна реалізувати клас "Автомобіль", який міститиме список компонентів та методи для додавання та видалення компонентів:
class Car:
    def __init__(self):
        self._components = []
    
    def add_component(self, component):
        self._components.append(component)
    
    def remove_component(self, component):
        self._components.remove(component)
Нарешті, можна реалізувати Компонувальник, який міститиме список доступних компонентів та функції для їх додавання до автомобіля та збереження до файлу:
class CarBuilder:
    def __init__(self):
        self._car = Car()
        self._available_components = []
    
    def add_component(self, component):
        self._car.add_component(component)
    
    def remove_component(self, component):
        self._car.remove_component(component)
    
    def save_car(self, filename):
        with open(filename, 'w') as file:
            for component in self._car._components:
                file.write(str(component) + '\n')
    
    def load_car(self, filename):
        with open(filename, 'r') as file:
            for line in file:
                component = eval(line.strip())
                self.add_component(component)
    
    def add_available_component(self, component):
        self._available_components.append(component)
    
    def remove_available_component(self, component):
        self._available_components.remove(component)
Це лише приклад можливого коду для Компонувальника. Необхідно детальніше продумати архітектуру програми та функціональність для досягнення бажаного результату.
продовжимо код для програми Компонувальника автомобіля. Ось код для головного вікна програми з візуальним інтерфейсом:
import tkinter as tk

class CarConfigurator(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        self.master.title("Компонувальник автомобіля")
        self.pack()
        self.create_widgets()

    def create_widgets(self):
        # Додавання елементів віджетів для вибору компонентів
        self.engine_var = tk.BooleanVar()
        self.engine_checkbutton = tk.Checkbutton(self, text="Двигун", variable=self.engine_var, command=self.update_car)
        self.engine_checkbutton.pack()

        self.transmission_var = tk.BooleanVar()
        self.transmission_checkbutton = tk.Checkbutton(self, text="Трансмісія", variable=self.transmission_var, command=self.update_car)
        self.transmission_checkbutton.pack()

        self.suspension_var = tk.BooleanVar()
        self.suspension_checkbutton = tk.Checkbutton(self, text="Підвіска", variable=self.suspension_var, command=self.update_car)
        self.suspension_checkbutton.pack()

        self.brakes_var = tk.BooleanVar()
        self.brakes_checkbutton = tk.Checkbutton(self, text="Гальма", variable=self.brakes_var, command=self.update_car)
        self.brakes_checkbutton.pack()

        # Додавання віджету відображення автомобіля
        self.car_canvas = tk.Canvas(self, width=300, height=200, bg="white")
        self.car_canvas.pack()

        # Початкова ініціалізація автомобіля
        self.car = Car()

    def update_car(self):
        # Оновлення автомобіля відповідно до вибраних компонентів
        self.car.clear_components()

        if self.engine_var.get():
            self.car.add_component(Engine())

        if self.transmission_var.get():
            self.car.add_component(Transmission())

        if self.suspension_var.get():
            self.car.add_component(Suspension())

        if self.brakes_var.get():
            self.car.add_component(BrakeSystem())

        self.draw_car()

    def draw_car(self):
        # Відображення автомобіля на віджеті canvas
        self.car_canvas.delete("all")

        components = self.car.get_components()

        x1, y1 = 50, 100
        x2, y2 = 250, 150

        self.car_canvas.create_rectangle(x1, y1, x2, y2, outline="black")

        if components:
            for component in components:
                if isinstance(component, Engine):
                    self.car_canvas.create_text(x1 + 20, y1 + 20, text="Двигун")

                if isinstance(component, Transmission):
                    self.car_canvas.create_text(x1 + 80, y1 + 20, text="Трансмісія")

                if isinstance(component, Suspension):
                    self.car_canvas.create_text(x1 + 140, y1 + 20, text="Підвіска")

                if isinstance(component, Brake):
                    self.car_canvas.create_text(x1 + 20, y1 + 20, text="Гальма")
                    
Тепер, коли ми маємо базові класи для компонентів та легкового автомобіля, ми можемо створити клас, який буде компонувальником, 
а також клас для створення легкових автомобілів з цих компонентів.

Створимо клас CarBuilder, який буде мати методи для додавання різних компонентів до автомобіля та для створення нового автомобіля з доданими компонентами:
class CarBuilder:
    def __init__(self):
        self.car = Car()

    def add_engine(self, engine):
        self.car.engine = engine

    def add_transmission(self, transmission):
        self.car.transmission = transmission

    def add_body(self, body):
        self.car.body = body

    def add_interior(self, interior):
        self.car.interior = interior

    def add_exterior(self, exterior):
        self.car.exterior = exterior

    def get_car(self):
        return self.car
Також нам потрібен клас CarAssembler, який буде створювати нові легкові автомобілі з доданими компонентами, використовуючи CarBuilder:
class CarAssembler:
    def __init__(self):
        self.builder = CarBuilder()

    def assemble_car(self, engine, transmission, body, interior, exterior):
        self.builder.add_engine(engine)
        self.builder.add_transmission(transmission)
        self.builder.add_body(body)
        self.builder.add_interior(interior)
        self.builder.add_exterior(exterior)
        return self.builder.get_car()
Цей клас буде використовуватись для створення нових автомобілів з доданими компонентами:

assembler = CarAssembler()

engine = Engine("V6", 3.5, "gasoline")
transmission = Transmission("automatic", 8)
body = Body("sedan", "white")
interior = Interior("leather", "black")
exterior = Exterior("alloy", "18-inch")

car = assembler.assemble_car(engine, transmission, body, interior, exterior)
Ми створили новий автомобіль з двигуном V6 об'ємом 3.5 літра на бензині, 
автоматичною 8-швидкісною коробкою передач, білого кольору седана з чорною шкіряною оббивкою та 18-дюймовими сплавними дисками.
